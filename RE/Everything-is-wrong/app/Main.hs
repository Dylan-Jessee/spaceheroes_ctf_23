{-# LANGUAGE TemplateHaskell #-}
module Main where
import Data.Char (ord)
import Data.List
import Data.Poly
import Data.Vector.Unboxed (fromList, toList)
import Data.FileEmbed (embedFile)
import qualified Data.ByteString (putStr,ByteString)




flagTable = [[],
          [115],
          [-11,126],
          [6,-40,264],
          [16,-78,56,696],
          [-69,754,-2727,3674,1128],
          [188,-3165,19750,-55935,69882,-16920],
          [-449,10557,-97565,448515,-1064786,1211328,-424800],
          [996,-31031,394611,-2635115,9881529,-20532974,21495024,-7993440],
          [-2137,84900,-1415050,12850320,-69054433,222838140,-416694780,406141200,-150111360],
          [4637,-227898,4798290,-56555100,409049781,-1870349922,5361247420,-9188062920,8415503712,-3033676800],
          [-10397,618205,-16003020,236688450,-2205916881,13469163645,-54229320430,141046045700,-224479558872,194661007200,-68065401600],
          [23740,-1681207,52499755,-951619020,11088794970,-86880712611,464841360995,-1688461154930,4050333226940,-6052067897832,5002981840800,-1696344249600],
          [-53491,4457178,-165509531,3613190130,-51508953573,503578118934,-3449140997753,16600994725590,-55416184723636,124241069097288,-175945866770016,139547098183680,-45978405580800],
          [115888,-11241191,490321442,-12707977711,217845198714,-2601429143313,22195622329166,-136499653085653,602429065304638,-1874388774282596,3969254117053992,-5369536614195936,4109014416015360,-1319356259020800],
          [-238088,26621672,-1349007114,40988462788,-832593451690,11933437712196,-124134392598502,949160678990524,-5341682020480806,21924874579419812,-64269240493096184,129612368668871088,-168541340279063616,125015970872862720,-39227092621516800],
          [461827,-58990560,3438146740,-121098123510,2877604671214,-48769328918310,607621236999920,-5652520105333530,39467540852931191,-206113118685924450,795166958887732340,-2214118094354853960,4279642684942992768,-5375661155739247680,3879182194632864000,-1192325719673088000],
          [-847322,122625024,-8146085960,329271532800,-9050009485244,179030923326528,-2631734455550200,29258778581947200,-248002539995899546,1603275343008411072,-7851761881366814320,-8188996081751066432,-2620496890522747424,-5316777297559799552,-7257476708320190976,-7125579775531098112,87936459169759232],
          [1480243,-240881653,18089012724,-831503629060,26167934287026,-597406169275006,10227474720402628,-133854102089390540,1352868515995386819,7853658177335970587,8731823509367011824,-1496962273781778184,1187087929274010416,-7027462137076214224,2801438321702130048,2560471797607163136,-7297749349580670976,-8500071757353975808],
          [-2491956,452768850,-38141744850,1977260698008,-70597047498912,1841073517182060,-36288227863534140,551809325996427096,-6549941607470740908,5669951288674431282,-3174191890886718786,-2037397161740577024,-6318024963500970512,5316375676485022496,3602096078230252256,-3547216284348779776,-3492169992900083200,-4269960239207501824,-3427285515056971776],
          [4117947,-829757094,77845886955,-4515469263000,181354086292014,-5351985027758628,120192800789316750,-2098854034028217960,-8021543823610171601,-1435495856916228550,1810146466342390967,-3997127003410768592,-7410337265178432184,1170879155909788000,2560488207337058672,-2453869763984053504,3957519055878347008,-4764017138553292800,-4264687174710648832,1927579843121971200],
          [-6841899,1519157730,-157640889765,10156158497250,-455173805669454,15068658195917460,-381890904698697930,7577092372905700500,-8680389102727318023,-7534000272893192422,8831965676909055887,-4750456572980219734,-8622879945129134032,-6616147975197111376,9092014326762332080,9150370789343256480,4192438342362831744,-3282724740942544384,2355186360141428736,-7873227819421614080,-8836148257894170624],
          [1088687,-264864969,30214870283,-2147867615083,106650881832168,-3929818501485546,111431297731536182,-2488320398639076246,7522207512454187487,6054660919280468707,-4647590216783372049,-4303152159517014719,5161250695251125818,2376974880038675520,3375997114741506816,-8343778234598976560,-6901487482254953952,-5150865241239088256,-83033786181685760,-4215291746404698112,-8127979828166066176,-8177676420834131968]]



numerators :: [Int] -> [UPoly Int]
numerators xs = [product $ map (\xj -> (toPoly (Data.Vector.Unboxed.fromList [-xj, 1]) )  ) (delete xi xs) | xi <- xs]


denomenators :: [Int] -> [Int]
denomenators xs = [product $ map (\xj -> (xi - xj)   ) (delete xi xs) | xi <- xs]



multiplyNumerators :: [UPoly Int] -> [Int] -> [UPoly Int]
multiplyNumerators (x:xs) (y:ys) = (x * (monomial  0 y ::UPoly Int)) : multiplyNumerators xs ys
multiplyNumerators [] [] = []



sumPolynomials :: [UPoly Int] -> UPoly Int
sumPolynomials (x:[]) = x
sumPolynomials (x:xs) = x + sumPolynomials xs
sumPolynomials [] = monomial 0 0



encryptFlag :: [Int]  -> [Int]
encryptFlag ys = let
    xs = [1..length(ys)]
    de = denomenators xs
    fac = foldr lcm 1 de
    tops = multiplyNumerators (numerators xs) ys
    in reverse$  toList $ unPoly (sumPolynomials $ multiplyNumerators tops [  fac `div` d | d <- de ])


validateFlag :: [Int] -> [Int] -> Bool
validateFlag (s:ss) (f:fs) = s == f && validateFlag ss fs
validateFlag [] [] = True
validateFlag [] _ = False
validateFlag _ [] = False


validateForSublist :: [Char] -> Bool
validateForSublist inpt = validateFlag (encryptFlag (map ord inpt)) (flagTable !!(length inpt))


checkInputLength:: [a] -> Bool
checkInputLength xs = (length xs) == (length flagTable) -1

-- Function to apply to consecutive slices of a list
iterateThroughSublists :: ([Char] -> Bool) -> [Char] -> Bool
iterateThroughSublists f xs = if  checkInputLength  xs then foldl' (&&) True (map validateForSublist (inits xs)) else False


antichthon :: Data.ByteString.ByteString
antichthon = $(embedFile "nemesis.txt")


main :: IO ()
main =do
  Data.ByteString.putStr antichthon
  putStrLn ".slaitnederc CTF yfireV"
  line <- getLine
  putStrLn $  {--show $ encryptFlag (map ord line)--} if (iterateThroughSublists validateForSublist line) then  ".reyalp emoh emocleW .dedeeccus noitadilaV" else "Incorrect, chthonite"